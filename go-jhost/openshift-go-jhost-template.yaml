apiVersion: v1
kind: Template
labels:
  template: "go-openshift-routes-and-services"
metadata:
  name: go-httpd-cert-tests
  annotations:
    description: "Demo of secret signing for certs, routes, and service types"
    tags: "httpd"
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: service-certs-go-jhost
    labels:
      app: go-jhost
    name: go-jhost
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: go-jhost
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: go-jhost
    name: go-jhost-nodeport
    namespace: "${NAMESPACE}"
  spec:
    type: NodePort
    selector:
      app: go-jhost
    ports:
    - port: 8443
      targetPort: 8443
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: go-jhost
    name: go-jhost-loadbalancer
    namespace: "${NAMESPACE}"
  spec:
    selector:
      app: go-jhost
    ports:
      - protocol: TCP
        port: 443
        targetPort: 8443
    type: LoadBalancer
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    labels:
      app: go-jhost
    name: go-jhost
    namespace: "${NAMESPACE}"
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 0
    selector:
      matchLabels:
        app: go-jhost
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: go-jhost
      spec:
        containers:
        - image: docker.io/jblaine/go-jhost:latest
          imagePullPolicy: Always
          name: go-jhost
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          env:
          - name: TLS_CRT
            value: /var/run/secrets/tls/tls.crt
          - name: TLS_KEY
            value: /var/run/secrets/tls/tls.key
          - name: HTTP_PORT
            value: "8080"
          - name: HTTPS_PORT
            value: "8443"
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/secrets/tls
            name: service-certs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: service-certs
          secret:
            secretName: service-certs-go-jhost
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: go-jhost
    name: go-jhost-http
    namespace: "${NAMESPACE}"
  spec:
    host: go-jhost-http.${WILDCARD_DNS}
    port:
      targetPort: 8080
    to:
      kind: Service
      name: go-jhost
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: go-jhost
    name: go-jhost-edge
    namespace: "${NAMESPACE}"
  spec:
    host: go-jhost-edge.${WILDCARD_DNS}
    port:
      targetPort: 8080
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: go-jhost
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: go-jhost
    name: go-jhost-reencrypt
    namespace: "${NAMESPACE}"
  spec:
    host: go-jhost-reencrypt.${WILDCARD_DNS}
    port:
      targetPort: 8443
    tls:
      termination: reencrypt
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: go-jhost
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      haproxy.router.openshift.io/balance: leastconn
    labels:
      app: go-jhost
    name: go-jhost-passthrough
    namespace: "${NAMESPACE}"
  spec:
    host: go-jhost-passthrough.${WILDCARD_DNS}
    port:
      targetPort: 8443
    tls:
      termination: passthrough
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: go-jhost
      weight: 100
    wildcardPolicy: None
parameters:
  - name: WILDCARD_DNS
    displayName: Wildcard DNS
    description: The wildcard dns entry for routes on this cluster
    required: true
  - name: NAMESPACE
    displayName: Target Namespace
    description: The target namespace for object creation
    required: true
